{"version":3,"sources":["hooks/useAppState.js","components/ActionIcon.js","components/TitleBarGridList.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","useAppState","initialNominations","useState","results","setResults","setCount","nominated","setNominated","error","setError","search","term","a","type","page","console","log","axios","get","process","searchResponse","data","Response","rawResults","Search","map","result","findIndex","item","imdbID","selected","totalResults","Error","nominate","id","resultIndex","newResults","prev","localStorage","setItem","JSON","stringify","deNominate","newNominated","index","splice","ActionIcon","tile","handleClick","content","label","Title","Year","disabled","color","icon","IconButton","aria-label","style","onClick","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","TitlebarGridList","title","classes","GridList","cellHeight","className","cols","GridListTile","key","ListSubheader","component","length","Poster","src","alt","GridListTileBar","subtitle","actionIcon","Alert","props","elevation","variant","marginTop","spacing","Banner","open","handleClose","Snackbar","onClose","severity","App","parse","getItem","DeNominate","draft","setDraft","setOpen","event","reason","value","onChange","newValue","onRequestSearch","onCancelSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.af341285.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst RESULT_PER_PAGE = 10;\nconst BASE_URL = \"https://www.omdbapi.com\";\n\nconst useAppState = (initialNominations, resultsPerPage = RESULT_PER_PAGE) => {\n  const [results, setResults] = useState([]);\n  const [count, setCount] = useState(0);\n  const [nominated, setNominated] = useState(initialNominations || []);\n  const [error, setError] = useState(\"\");\n\n  const search = async (term, type = \"movie\", page = 1) => {\n    console.log(\"enters search\");\n    const searchResponse = await axios.get(\n      `${BASE_URL}/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&s=${term}&type=${type}&page=${page}`\n    );\n    console.log(searchResponse);\n    if (searchResponse.data.Response === \"True\") {\n      const rawResults = searchResponse.data.Search.map((result) => {\n        if (nominated.findIndex((item) => item.imdbID === result.imdbID) >= 0) {\n          return { ...result, selected: true };\n        } else {\n          return { ...result, selected: false };\n        }\n      });\n      setCount(searchResponse.data.totalResults);\n      setResults(rawResults);\n      setError(\"\");\n    } else {\n      setCount(0);\n      setResults([]);\n      setError(searchResponse.data.Error);\n    }\n  };\n\n  const nominate = (id) => {\n    const resultIndex = results.findIndex((result) => result.imdbID === id);\n    const newResults = [...results];\n    newResults[resultIndex].selected = true;\n    setResults(newResults);\n    setNominated((prev) => {\n      // store for later retrieval when user leaves page\n\n      localStorage.setItem(\n        \"nominations\",\n        JSON.stringify([...prev, newResults[resultIndex]])\n      );\n      return [...prev, newResults[resultIndex]];\n    });\n  };\n\n  const deNominate = (id) => {\n    setNominated((prev) => {\n      const newNominated = [...prev];\n      // find movie in nominated list\n      const index = newNominated.findIndex((item) => item.imdbID === id);\n      // remove movie from nominated list\n      newNominated.splice(index, 1);\n      // store for later retrieval when user leaves page\n      localStorage.setItem(\"nominations\", JSON.stringify(newNominated));\n\n      return newNominated;\n    });\n    setResults((prev) => {\n      const newResults = [...prev];\n      // find movie id in results\n      const index = newResults.findIndex((item) => item.imdbID === id);\n      // update selected status for movie, if it exists\n      if (index > 0) {\n        newResults[index].selected = false;\n        return newResults;\n      }\n      return prev;\n    });\n  };\n  return [results, nominated, error, search, nominate, deNominate];\n};\n\nexport default useAppState;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddCircle from \"@material-ui/icons/AddCircle\";\nimport RemoveCircle from \"@material-ui/icons/RemoveCircle\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\n\nconst ActionIcon = (tile, type, handleClick) => {\n  const content = {};\n  content.color = \"#c6ff00\";\n\n  if (type === \"results\") {\n    if (tile.selected) {\n      content.label = `Added ${tile.Title} (${tile.Year}) to nomination`;\n      content.disabled = true;\n      content.color = \"#bdbdbd\";\n      content.icon = <CheckCircle />;\n    } else {\n      content.label = `Adds ${tile.Title} (${tile.Year}) to nomination`;\n      content.disabled = false;\n      content.icon = <AddCircle />;\n    }\n  } else if (type === \"nominations\") {\n    if (tile.selected) {\n      content.label = `Removed ${tile.Title} (${tile.Year}) from nomination`;\n      content.disabled = false;\n      content.color = \"#f50057\";\n      content.icon = <RemoveCircle />;\n    }\n  }\n\n  return (\n    <IconButton\n      aria-label={content.label}\n      style={{ color: content.color }}\n      onClick={() => handleClick(tile.imdbID)}\n      disabled={content.disabled}\n    >\n      {content.icon}\n    </IconButton>\n  );\n};\n\nexport default ActionIcon;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddCircle from \"@material-ui/icons/AddCircle\";\nimport RemoveCircle from \"@material-ui/icons/RemoveCircle\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport ActionIcon from \"./ActionIcon\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: \"50%\",\n    height: \"100%\",\n  },\n  icon: {\n    // color: \"rgba(255, 255, 255, 0.54)\",\n    color: \"#c6ff00\",\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\nexport default function TitlebarGridList({\n  results,\n  error,\n  title,\n  type = \"results\",\n  handleClick,\n}) {\n  const classes = useStyles();\n\n  return (\n    // <div className={classes.root}>\n    <GridList cellHeight={200} className={classes.gridList} cols={2}>\n      <GridListTile key=\"Subheader\" cols={2} style={{ height: \"auto\" }}>\n        <ListSubheader component=\"div\">{title}</ListSubheader>\n      </GridListTile>\n      {results.length > 0 ? (\n        results.map((tile) => (\n          <GridListTile key={`${tile.Poster}-${tile.Year}`}>\n            <img src={tile.Poster} alt={tile.Title} />\n            <GridListTileBar\n              title={`${tile.Title}`}\n              subtitle={<span>{tile.Year}</span>}\n              actionIcon={\n                //   <IconButton\n                //     aria-label={`Adds ${tile.Title} (${tile.Year}) to nomination`}\n                //     className={classes.icon}\n                //     onClick={() => handleClick(tile.imdbID)}\n                //     disabled={tile.selected ? true : false}\n                //   >\n                //     {tile.selected ? <CheckCircle /> : <AddCircle />}\n                //   </IconButton>\n                ActionIcon(tile, type, handleClick)\n              }\n            />\n          </GridListTile>\n        ))\n      ) : (\n        <GridListTile key=\"message\" cols={2} style={{ height: \"auto\" }}>\n          <ListSubheader component=\"div\">Nothing to Show</ListSubheader>\n        </GridListTile>\n      )}\n    </GridList>\n    // </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Banner({ open, handleClose }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Snackbar open={open} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"warning\">\n          You have selected the maximum of 5 nominations!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport useAppState from \"./hooks/useAppState\";\nimport SearchBar from \"material-ui-search-bar\";\nimport TitlebarGridList from \"./components/TitleBarGridList\";\nimport Banner from \"./components/Banner\";\n\nfunction App() {\n  const [results, nominated, error, search, nominate, DeNominate] = useAppState(\n    JSON.parse(localStorage.getItem(\"nominations\")) || []\n  );\n  const [draft, setDraft] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n  return (\n    <div className=\"App\">\n      <Banner open={open} handleClose={handleClose} />\n      <SearchBar\n        value={draft}\n        onChange={(newValue) => setDraft(newValue)}\n        onRequestSearch={() => search(draft)}\n        onCancelSearch={() => setDraft(\"\")}\n      />\n      <div\n        className=\"details-container\"\n        // style={{\n        //   display: \"flex\",\n        //   flexDirection: \"row\",\n        //   justifyContent: \"space-between\",\n        // }}\n      >\n        {nominated.length >= 5 && (\n          <div\n            style={{ background: \"yellow\" }}\n          >{`You have nominated the maximum of 5 movies!`}</div>\n        )}\n        <span className=\"search-results\">\n          <TitlebarGridList\n            results={results}\n            title={\"Search Results\"}\n            handleClick={(value) => {\n              if (nominated.length < 5) {\n                nominate(value);\n              }\n            }}\n          />\n        </span>\n        <span className=\"nominations\">\n          <TitlebarGridList\n            results={nominated}\n            error={error}\n            title={\"Nominations\"}\n            type={\"nominations\"}\n            handleClick={(value) => DeNominate(value)}\n          />\n        </span>\n      </div>\n      {/* <p>{JSON.stringify(nominated)}</p> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}